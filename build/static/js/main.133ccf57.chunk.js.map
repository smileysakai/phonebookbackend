{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","Notification","message","Footer","style","color","fontStyle","fontSize","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.133ccf57.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important'\n    : 'make important'\n  return (\n    <li className ='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst noteService = { getAll, create, update }\nexport default noteService","import React, { useState, useEffect } from 'react'\n//import axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n  /*const hook = () => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n  }\n  \n  useEffect(hook, [])\n  console.log('render', notes.length, 'notes')\n  */\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    //const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService      \n      .update(id, changedNote)      \n      .then(returnedNote => {        \n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))  \n      })\n      .catch(error => { \n        setErrorMessage(     \n          `Note '${note.content}' was already removed from server`   \n        )        \n        setTimeout(() => {          \n          setErrorMessage(null)        \n        }, 5000)      \n      setNotes(notes.filter(n => n.id !== id))    \n    })\n  }\n  \n  const notesToShow = showAll    \n  ? notes    \n  : notes.filter(note => note.important)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n\n    }\n  \n    noteService      \n      .create(noteObject)      \n      .then(returnedNote => {        \n        setNotes(notes.concat(returnedNote))      \n        setNewNote('')      \n      })\n  }\n\n  const handleNoteChange = (event) => {    \n    console.log(event.target.value)    \n    setNewNote(event.target.value)  \n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const Footer = () => {  \n    const footerStyle = {    \n      color: 'green',    \n      fontStyle: 'italic',    \n      fontSize: 16  \n    }  \n    return (    \n      <div style={footerStyle}>      \n        <br />      \n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>    \n      </div>  \n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>        \n        <button onClick={() => setShowAll(!showAll)}>          \n          show {showAll ? 'important' : 'all' }        \n        </button>      \n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} toggleImportance = {() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>        \n        <input value={newNote} onChange={handleNoteChange} /> \n        <button type=\"submit\">save</button>      \n      </form>\n      <Footer />   \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n/*\nconst result = notes.map(note => note.id)\nconsole.log(result)*/"],"sourceRoot":""}